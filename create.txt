-- Create profiles table
CREATE TABLE profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  display_name TEXT NOT NULL CHECK (length(display_name) BETWEEN 3 AND 16),
  username TEXT NOT NULL CHECK (length(username) BETWEEN 3 AND 16),
  age INTEGER NOT NULL CHECK (age >= 0),
  sex TEXT NOT NULL CHECK (sex IN ('Male', 'Female')),
  CONSTRAINT unique_username UNIQUE (username)
);

-- Enable RLS on profiles
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;

-- RLS policies for profiles
CREATE POLICY "Allow insert own profile" ON profiles
FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = id);

CREATE POLICY "Allow select own profile" ON profiles
FOR SELECT
TO authenticated
USING (auth.uid() = id);

CREATE POLICY "Allow select for matching" ON profiles
FOR SELECT
TO authenticated
USING (true);

CREATE POLICY "Allow update own profile" ON profiles
FOR UPDATE
TO authenticated
USING (auth.uid() = id);

-- Create match_requests table
CREATE TABLE match_requests (
  id SERIAL PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id),
  desired_sex TEXT NOT NULL CHECK (desired_sex IN ('Male', 'Female', 'Either')),
  created_at TIMESTAMP DEFAULT NOW(),
  matched_with INTEGER DEFAULT NULL REFERENCES match_requests(id),
  participants UUID[] DEFAULT NULL
);

-- Enable RLS on match_requests
ALTER TABLE match_requests ENABLE ROW LEVEL SECURITY;

-- RLS policies for match_requests
CREATE POLICY "Allow insert own match_request" ON match_requests
FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Allow select if in participants" ON match_requests
FOR SELECT
TO authenticated
USING (auth.uid() = ANY(participants));

CREATE POLICY "Allow delete own match_request" ON match_requests
FOR DELETE
TO authenticated
USING (auth.uid() = user_id);

-- Create find_match function
CREATE OR REPLACE FUNCTION find_match(current_mr_id INTEGER)
RETURNS INTEGER AS $$
DECLARE
  match_id INTEGER;
  current_matched_with INTEGER;
  current_user_id UUID;
  matched_user_id UUID;
BEGIN
  -- Get the current request's matched_with and user_id
  SELECT matched_with, user_id INTO current_matched_with, current_user_id
  FROM match_requests
  WHERE id = current_mr_id;

  -- If already matched, return the existing match
  IF current_matched_with IS NOT NULL THEN
    RETURN current_matched_with;
  END IF;

  -- Lock the current request to prevent concurrent updates
  PERFORM * FROM match_requests WHERE id = current_mr_id FOR UPDATE;

  -- Find a compatible unmatched match request
  SELECT mr2.id, mr2.user_id INTO match_id, matched_user_id
  FROM match_requests mr1
  JOIN profiles p1 ON mr1.user_id = p1.id
  JOIN match_requests mr2 ON mr2.matched_with IS NULL AND mr2.id != mr1.id
  JOIN profiles p2 ON mr2.user_id = p2.id
  WHERE mr1.id = current_mr_id
    AND mr1.matched_with IS NULL
    AND (mr1.desired_sex = p2.sex OR mr1.desired_sex = 'Either')
    AND (mr2.desired_sex = p1.sex OR mr2.desired_sex = 'Either')
  LIMIT 1
  FOR UPDATE SKIP LOCKED;

  -- If a match is found, update both requests
  IF match_id IS NOT NULL THEN
    UPDATE match_requests 
    SET matched_with = match_id, 
        participants = ARRAY[current_user_id, matched_user_id]
    WHERE id = current_mr_id;

    UPDATE match_requests 
    SET matched_with = current_mr_id, 
        participants = ARRAY[current_user_id, matched_user_id]
    WHERE id = match_id;

    RETURN match_id;
  END IF;

  -- No match found
  RETURN NULL;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Grant permission to authenticated users
GRANT EXECUTE ON FUNCTION find_match TO authenticated;